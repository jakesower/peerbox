!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){"use strict";(function(t,i){var r,o=n(1);r="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:i;var s=Object(o.a)(r);e.a=s}).call(this,n(4),n(3)(t))},function(t,e,n){"use strict";function i(t){var e,n=t.Symbol;return"function"==typeof n?n.observable?e=n.observable:(e=n("observable"),n.observable=e):e="@@observable",e}n.d(e,"a",function(){return i})},function(t,e,n){"use strict";
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function i(t){this.source=t}function r(t,e){if(t<0)throw new TypeError("n must be >= 0");var n=e.length;return 0===t||0===n?e:t>=n?[]:function(t,e,n){for(var i=new Array(n),r=0;r<n;++r)i[r]=e[t+r];return i}(t,e,n-t)}function o(t){return r(1,t)}function s(t,e){for(var n=e.length,i=new Array(n),r=0;r<n;++r)i[r]=t(e[r]);return i}function u(t,e,n){if(e<0)throw new TypeError("i must be >= 0");for(var i=n.length,r=new Array(i),o=0;o<i;++o)r[o]=e===o?t:n[o];return r}function h(t,e){if(t<0)throw new TypeError("i must be >= 0");var n=e.length;return 0===n||t>=n?e:1===n?[]:function(t,e,n){var i=new Array(n),r=void 0;for(r=0;r<t;++r)i[r]=e[r];for(r=t;r<n;++r)i[r]=e[r+1];return i}(t,e,n-1)}function c(t,e){for(var n=0,i=e.length;n<i;++n)if(t===e[n])return n;return-1}n.r(e),i.prototype.run=function(t,e){return this.source.run(t,e)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */;
/** @license MIT License (c) copyright 2010-2016 original author or authors */
var p=function(t){return t},f=function(t,e){return t(e)};
/** @license MIT License (c) copyright 2016 original author or authors */
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function a(t,e){this._dispose=t,this._data=e}
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function d(){this.disposable=void 0,this.disposed=!1,this._resolve=void 0;var t=this;this.result=new Promise(function(e){t._resolve=e})}a.prototype.dispose=function(){return this._dispose(this._data)},d.prototype.setDisposable=function(t){if(void 0!==this.disposable)throw new Error("setDisposable called more than once");this.disposable=t,this.disposed&&this._resolve(t.dispose())},d.prototype.dispose=function(){return this.disposed?this.result:(this.disposed=!0,void 0!==this.disposable&&(this.result=this.disposable.dispose()),this.result)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */;
/** @license MIT License (c) copyright 2010-2016 original author or authors */
var l=s,y=p;function v(t,e,n){var i,r=_(e);return null!==(i=r)&&"object"==typeof i&&"function"==typeof i.then?r.catch(function(e){n.error(t,e)}):r}function w(t,e){return x(new a(t,e))}function k(){return new a(y,void 0)}function m(t){return w(b,t)}function b(t){return Promise.all(l(_,t))}function _(t){try{return t.dispose()}catch(t){return Promise.reject(t)}}function g(){return new d}function x(t){return new a(E,function(t){return{disposed:!1,disposable:t,value:void 0}}
/** @license MIT License (c) copyright 2010-2016 original author or authors */(t))}function E(t){return t.disposed||(t.disposed=!0,t.value=_(t.disposable),t.disposable=void 0),t.value}function A(t){setTimeout(function(){throw t},0)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */function P(t,e,n){this._run=t,this.value=e,this.sink=n,this.active=!0}function T(t,e,n){n.error(t,e)}function q(t,e,n){n.event(t,e)}function M(t,e,n){n.end(t,e)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */function S(t){return new i(new R(t))}function R(t){this.value=t}function C(t,e,n){n.event(t,e),n.end(t,void 0)}function I(){return N}function L(){}function j(t){return t.dispose()}P.event=function(t,e){return new P(q,t,e)},P.end=function(t,e){return new P(M,t,e)},P.error=function(t,e){return new P(T,t,e)},P.prototype.dispose=function(){this.active=!1},P.prototype.run=function(t){this.active&&this._run(t,this.value,this.sink)},P.prototype.error=function(t,e){if(!this.active)return A(e);this.sink.error(t,e)},R.prototype.run=function(t,e){return e.asap(new P(C,this.value,t))},L.prototype.run=function(t,e){var n=P.end(void 0,t);return e.asap(n),w(j,n)};var N=new i(new L);function O(){}O.prototype.run=function(){return k()};var B;
/** @license MIT License (c) copyright 2010-2016 original author or authors */new i(new O);function W(t){this.array=t}function D(t,e,n){for(var i=0,r=e.length;i<r&&this.active;++i)n.event(t,e[i]);this.active&&n.end(t)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */function V(t){this.iterable=t}function U(t,e,n){for(var i=e.next();!i.done&&this.active;)n.event(t,i.value),i=e.next();n.end(t,i.value)}W.prototype.run=function(t,e){return e.asap(new P(D,this.array,t))},B="function"==typeof Set&&"function"==typeof(new Set)["@@iterator"]?"@@iterator":"function"==typeof Symbol?Symbol.iterator:"_es6shim_iterator_",V.prototype.run=function(t,e){return e.asap(new P(U,this.iterable[B](),t))};var z=n(0);
/** @license MIT License (c) copyright 2010-2016 original author or authors */
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function F(t,e,n){try{n.event(t,e)}catch(e){n.error(t,e)}}function H(t,e,n){try{n.end(t,e)}catch(e){n.error(t,e)}}
/** @license MIT License (c) copyright 2010-2016 original author or authors */function G(t){this.observable=t}function J(t,e){this.sink=t,this.scheduler=e}function K(t){return t.unsubscribe()}
/** @license MIT License (c) copyright 2010-2016 original author or authors */function Q(t,e){this.period=t,this.value=e}
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function X(t,e,n,i){this.time=t,this.period=e,this.task=n,this.scheduler=i,this.active=!0}
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function Y(t){return Promise.resolve(t).then(Z)}function Z(t){try{return t.run()}catch(e){return t.error(e)}}
/** @license MIT License (c) copyright 2010-2016 original author or authors */function $(t,e){this.timer=t,this.timeline=e,this._timer=null,this._nextArrival=1/0;var n=this;this._runReadyTasksBound=function(){n._runReadyTasks(n.now())}}
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function tt(){}function et(t){this.f=t,this.active=!0}
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function nt(){this.tasks=[]}function it(t,e,n){for(var i=e.events,r=0;r<i.length;++r){var o=i[r];o.active&&(t(o),o.period>=0&&o.active&&(o.time=o.time+o.period,rt(o,n)))}return n}function rt(t,e){var n=e.length;if(0!==n){var i=st(t.time,e);i>=n?e.push(ut(t.time,[t])):t.time===e[i].time?e[i].events.push(t):e.splice(i,0,ut(t.time,[t]))}else e.push(ut(t.time,[t]))}function ot(t,e){e.events=function(t,e){for(var n,i=e.length,r=new Array(i),o=0,s=0;s<i;++s)t(n=e[s])||(r[o]=n,++o);return r.length=o,r}(t,e.events)}function st(t,e){for(var n,i,r=0,o=e.length;r<o;){if(t===(i=e[n=Math.floor((r+o)/2)]).time)return n;t<i.time?o=n:r=n+1}return o}function ut(t,e){return{time:t,events:e}}
/** @license MIT License (c) copyright 2010-2016 original author or authors */G.prototype.run=function(t,e){var n=this.observable.subscribe(new J(t,e));if("function"==typeof n)return w(n);if(n&&"function"==typeof n.unsubscribe)return w(K,n);throw new TypeError("Observable returned invalid subscription "+String(n))},J.prototype.next=function(t){F(this.scheduler.now(),t,this.sink)},J.prototype.complete=function(t){H(this.scheduler.now(),t,this.sink)},J.prototype.error=function(t){this.sink.error(this.scheduler.now(),t)},Q.prototype.run=function(t,e){return e.periodic(this.period,P.event(this.value,t))},X.prototype.run=function(){return this.task.run(this.time)},X.prototype.error=function(t){return this.task.error(this.time,t)},X.prototype.dispose=function(){return this.scheduler.cancel(this),this.task.dispose()},$.prototype.now=function(){return this.timer.now()},$.prototype.asap=function(t){return this.schedule(0,-1,t)},$.prototype.delay=function(t,e){return this.schedule(t,-1,e)},$.prototype.periodic=function(t,e){return this.schedule(0,t,e)},$.prototype.schedule=function(t,e,n){var i=this.now(),r=new X(i+Math.max(0,t),e,n,this);return this.timeline.add(r),this._scheduleNextRun(i),r},$.prototype.cancel=function(t){t.active=!1,this.timeline.remove(t)&&this._reschedule()},$.prototype.cancelAll=function(t){this.timeline.removeAll(t),this._reschedule()},$.prototype._reschedule=function(){this.timeline.isEmpty()?this._unschedule():this._scheduleNextRun(this.now())},$.prototype._unschedule=function(){this.timer.clearTimer(this._timer),this._timer=null},$.prototype._scheduleNextRun=function(t){if(!this.timeline.isEmpty()){var e=this.timeline.nextArrival();null===this._timer?this._scheduleNextArrival(e,t):e<this._nextArrival&&(this._unschedule(),this._scheduleNextArrival(e,t))}},$.prototype._scheduleNextArrival=function(t,e){this._nextArrival=t;var n=Math.max(0,t-e);this._timer=this.timer.setTimer(this._runReadyTasksBound,n)},$.prototype._runReadyTasks=function(t){this._timer=null,this.timeline.runTasks(t,Z),this._scheduleNextRun(this.now())},tt.prototype.now=Date.now,tt.prototype.setTimer=function(t,e){return e<=0?function(t){var e=new et(t);return Y(e),e}(t):setTimeout(t,e)},tt.prototype.clearTimer=function(t){return t instanceof et?t.cancel():clearTimeout(t)},et.prototype.run=function(){return this.active&&this.f()},et.prototype.error=function(t){throw t},et.prototype.cancel=function(){this.active=!1},nt.prototype.nextArrival=function(){return this.isEmpty()?1/0:this.tasks[0].time},nt.prototype.isEmpty=function(){return 0===this.tasks.length},nt.prototype.add=function(t){rt(t,this.tasks)},nt.prototype.remove=function(t){var e=st(t.time,this.tasks);if(e>=0&&e<this.tasks.length){var n=c(t,this.tasks[e].events);if(n>=0)return this.tasks[e].events.splice(n,1),!0}return!1},nt.prototype.removeAll=function(t){for(var e=0,n=this.tasks.length;e<n;++e)ot(t,this.tasks[e])},nt.prototype.runTasks=function(t,e){for(var n=this.tasks,i=n.length,r=0;r<i&&n[r].time<=t;)++r;this.tasks=n.slice(r);for(var o=0;o<r;++o)this.tasks=it(e,n[o],this.tasks)};var ht=new $(new tt,new nt);function ct(t,e,n){this.fatalError=t,this.subscriber=e,this.disposable=n}function pt(t){this.disposable=t}function ft(t,e,n){if("function"==typeof e.error)try{e.error(t)}catch(t){n(t)}else n(t)}
/** @license MIT License (c) copyright 2010-2017 original author or authors */
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function at(t,e,n){this.event=t,this.source=e,this.capture=n}function dt(t){var e=t.target;e.source.removeEventListener(e.event,t.addEvent,e.capture)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */function lt(t){this.sink=t,this.events=[],this.active=!0}function yt(t,e,n){this.sink=t,this.events=n,this.time=e}function vt(t,e,n){this.time=t,this.value=e,this.sink=n}function wt(t,e,n){this.time=t,this.value=e,this.sink=n}
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function kt(t,e){this.event=t,this.source=e}function mt(t){var e=t.target;e.source.removeListener(e.event,t.addEvent)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */function bt(t,e,n){var r;if("function"==typeof e.addEventListener&&"function"==typeof e.removeEventListener)arguments.length<3&&(n=!1),r=new at(t,e,n);else{if("function"!=typeof e.addListener||"function"!=typeof e.removeListener)throw new Error("source must support addEventListener/removeEventListener or addListener/removeListener");r=new kt(t,e)}return new i(r)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */function _t(t){return function(t,e){return new Promise(function(n,i){!function(t,e,n,i){var r=g(),o=new gt(n,i,r);r.setDisposable(t.run(o,e))}(t,e,n,i)})}(t,ht)}function gt(t,e,n){this._end=t,this._error=e,this._disposable=n,this.active=!0}function xt(t,e,n,i){Promise.resolve(n.dispose()).then(function(){t(i)},e)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */function Et(t){this.sink=t}
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function At(t,e){this.p=t,this.source=e}function Pt(t,e){this.p=t,this.sink=e}
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function Tt(t,e,n){this.p=t,this.f=e,this.source=n}function qt(t,e,n){this.p=t,this.f=e,this.sink=n}
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function Mt(t,e){this.f=t,this.source=e}function St(t,e){this.f=t,this.sink=e}
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function Rt(t,e){return new i(Mt.create(t,e.source))}function Ct(t,e){return new i(new It(t,e.source))}function It(t,e){this.source=e,this.f=t}function Lt(t,e){this.sink=e,this.f=t}function jt(t){return _t(t.source)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */function Nt(t,e,n){this.step=t,this.seed=e,this.source=n}function Ot(t,e,n){this.step=t,this.seed=e,this.sink=n}function Bt(t,e,n){this.source=n,this.f=t,this.value=e}function Wt(t,e,n){this.f=t,this.value=e,this.sink=n}function Dt(t,e,n){this.source=n,this.f=t,this.value=e}function Vt(t,e,n){this.f=t,this.value=e,this.sink=n}function Ut(t,e){this.f=t,this.value=e}function zt(t,e,n,i){this.f=t,this.sink=n,this.scheduler=i,this.active=!0;var r=this;Promise.resolve(this).then(function(t){return Ft(t,e)}).catch(function(t){r.sink.error(r.scheduler.now(),t)})}function Ft(t,e){var n=t.f;return Promise.resolve(n(e)).then(function(e){return function(t,e){if(e.done)return t.sink.end(t.scheduler.now(),e.value),e.value;if(t.sink.event(t.scheduler.now(),e.value),!t.active)return e.value;return Ft(t,e.seed)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */(t,e)})}function Ht(t,e){this.f=t,this.value=e}function Gt(t,e,n,i){this.f=t,this.sink=n,this.scheduler=i,this.active=!0;var r=e,o=this;Promise.resolve(this).then(function(t){return Jt(t,r)}).catch(function(t){o.sink.error(o.scheduler.now(),t)})}function Jt(t,e){if(t.sink.event(t.scheduler.now(),e),!t.active)return e;var n=t.f;return Promise.resolve(n(e)).then(function(e){return function(t,e){return t.active?Jt(t,e):t.value}
/** @license MIT License (c) copyright 2010-2014 original author or authors */(t,e)})}function Kt(t,e){this.f=t,this.args=e}function Qt(t,e,n){this.iterator=t,this.sink=e,this.scheduler=n,this.active=!0;var i=this;Promise.resolve(this).then(Xt).catch(function(t){i.sink.error(i.scheduler.now(),t)})}function Xt(t,e){return t.active?Yt(t,t.iterator.next(e)):e}function Yt(t,e){return e.done?t.sink.end(t.scheduler.now(),e.value):Promise.resolve(e.value).then(function(e){return function(t,e){return t.sink.event(t.scheduler.now(),e),Xt(t,e)}(t,e)},function(e){return function(t,e){return Yt(t,t.iterator.throw(e))}(t,e)})}
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function Zt(t,e){return new i(new $t(t,e.source))}function $t(t,e){this.f=t,this.source=e}function te(t,e,n,i){this.f=t,this.sink=n,this.scheduler=i,this.active=!0,this.disposable=x(e.run(this,i))}function ee(t,e){return Zt(function(){return e},t)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */function ne(t,e){this.sink=e,this.index=t,this.active=!0,this.value=void 0}
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function ie(t,e){switch(e.length){case 0:return t();case 1:return t(e[0]);case 2:return t(e[0],e[1]);case 3:return t(e[0],e[1],e[2]);case 4:return t(e[0],e[1],e[2],e[3]);case 5:return t(e[0],e[1],e[2],e[3],e[4]);default:return t.apply(void 0,e)}}
/** @license MIT License (c) copyright 2010-2016 original author or authors */ct.prototype.event=function(t,e){this.disposable.disposed||"function"!=typeof this.subscriber.next||this.subscriber.next(e)},ct.prototype.end=function(t,e){if(!this.disposable.disposed){var n=this.subscriber,i=this.fatalError;Promise.resolve(this.disposable.dispose()).then(function(){"function"==typeof n.complete&&n.complete(e)}).catch(function(t){ft(t,n,i)})}},ct.prototype.error=function(t,e){var n=this.subscriber,i=this.fatalError;Promise.resolve(this.disposable.dispose()).then(function(){ft(e,n,i)})},pt.prototype.unsubscribe=function(){this.disposable.dispose()},at.prototype.run=function(t,e){function n(n){F(e.now(),n,t)}return this.source.addEventListener(this.event,n,this.capture),w(dt,{target:this,addEvent:n})},lt.prototype.event=function(t,e){this.active&&(0===this.events.length&&Y(new yt(this.sink,t,this.events)),this.events.push({time:t,value:e}))},lt.prototype.end=function(t,e){this.active&&this._end(new vt(t,e,this.sink))},lt.prototype.error=function(t,e){this._end(new wt(t,e,this.sink))},lt.prototype._end=function(t){this.active=!1,Y(t)},yt.prototype.run=function(){for(var t,e=this.events,n=this.sink,i=0,r=e.length;i<r;++i)t=e[i],this.time=t.time,n.event(t.time,t.value);e.length=0},yt.prototype.error=function(t){this.sink.error(this.time,t)},vt.prototype.run=function(){this.sink.end(this.time,this.value)},vt.prototype.error=function(t){this.sink.error(this.time,t)},wt.prototype.run=function(){this.sink.error(this.time,this.value)},wt.prototype.error=function(t){throw t},kt.prototype.run=function(t,e){var n=new lt(t);function i(t){var i=arguments.length;if(i>1){for(var r=new Array(i),o=0;o<i;++o)r[o]=arguments[o];F(e.now(),r,n)}else F(e.now(),t,n)}return this.source.addListener(this.event,i),w(mt,{target:this,addEvent:i})},gt.prototype.event=function(t,e){},gt.prototype.end=function(t,e){this.active&&(this.active=!1,xt(this._end,this._error,this._disposable,e))},gt.prototype.error=function(t,e){this.active=!1,xt(this._error,this._error,this._disposable,e)},Et.prototype.event=function(t,e){return this.sink.event(t,e)},Et.prototype.end=function(t,e){return this.sink.end(t,e)},Et.prototype.error=function(t,e){return this.sink.error(t,e)},At.create=function(t,e){return e instanceof At?new At(function(t,e){return function(n){return t(n)&&e(n)}}(e.p,t),e.source):new At(t,e)},At.prototype.run=function(t,e){return this.source.run(new Pt(this.p,t),e)},Pt.prototype.end=Et.prototype.end,Pt.prototype.error=Et.prototype.error,Pt.prototype.event=function(t,e){(0,this.p)(e)&&this.sink.event(t,e)},Tt.prototype.run=function(t,e){return this.source.run(new qt(this.p,this.f,t),e)},qt.prototype.event=function(t,e){var n=this.f;(0,this.p)(e)&&this.sink.event(t,n(e))},qt.prototype.end=Et.prototype.end,qt.prototype.error=Et.prototype.error,Mt.create=function(t,e){return e instanceof Mt?new Mt(function(t,e){return function(n){return t(e(n))}}(t,e.f),e.source):e instanceof At?new Tt(e.p,t,e.source):new Mt(t,e)},Mt.prototype.run=function(t,e){return this.source.run(new St(this.f,t),e)},St.prototype.end=Et.prototype.end,St.prototype.error=Et.prototype.error,St.prototype.event=function(t,e){var n=this.f;this.sink.event(t,n(e))},It.prototype.run=function(t,e){return this.source.run(new Lt(this.f,t),e)},Lt.prototype.end=Et.prototype.end,Lt.prototype.error=Et.prototype.error,Lt.prototype.event=function(t,e){(0,this.f)(e),this.sink.event(t,e)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */,Nt.prototype.run=function(t,e){return this.source.run(new Ot(this.step,this.seed,t),e)},Ot.prototype.error=Et.prototype.error,Ot.prototype.event=function(t,e){var n=this.step(this.seed,e);this.seed=n.seed,this.sink.event(t,n.value)},Ot.prototype.end=function(t){this.sink.end(t,this.seed)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */,Bt.prototype.run=function(t,e){return m([e.asap(P.event(this.value,t)),this.source.run(new Wt(this.f,this.value,t),e)])},Wt.prototype.event=function(t,e){var n=this.f;this.value=n(this.value,e),this.sink.event(t,this.value)},Wt.prototype.error=Et.prototype.error,Wt.prototype.end=Et.prototype.end,Dt.prototype.run=function(t,e){return this.source.run(new Vt(this.f,this.value,t),e)},Vt.prototype.event=function(t,e){var n=this.f;this.value=n(this.value,e),this.sink.event(t,this.value)},Vt.prototype.error=Et.prototype.error,Vt.prototype.end=function(t){this.sink.end(t,this.value)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */,Ut.prototype.run=function(t,e){return new zt(this.f,this.value,t,e)},zt.prototype.dispose=function(){this.active=!1},Ht.prototype.run=function(t,e){return new Gt(this.f,this.value,t,e)},Gt.prototype.dispose=function(){this.active=!1},Kt.prototype.run=function(t,e){return new Qt(this.f.apply(void 0,this.args),t,e)},Qt.prototype.dispose=function(){this.active=!1},$t.prototype.run=function(t,e){return new te(this.f,this.source,t,e)},te.prototype.error=Et.prototype.error,te.prototype.event=function(t,e){this.active&&this.sink.event(t,e)},te.prototype.end=function(t,e){this.active&&(v(t,this.disposable,this.sink),this._startNext(t,e,this.sink))},te.prototype._startNext=function(t,e,n){try{this.disposable=this._continue(this.f,e,n)}catch(e){n.error(t,e)}},te.prototype._continue=function(t,e,n){return t(e).source.run(n,this.scheduler)},te.prototype.dispose=function(){return this.active=!1,this.disposable.dispose()}
/** @license MIT License (c) copyright 2010-2016 original author or authors */,ne.prototype.event=function(t,e){this.active&&(this.value=e,this.sink.event(t,this))},ne.prototype.end=function(t,e){this.active&&(this.active=!1,this.sink.end(t,{index:this.index,value:e}))},ne.prototype.error=Et.prototype.error;var re=s,oe=o;function se(t,e){var n=e.length;return 0===n?I():1===n?Rt(t,e[0]):new i(function(t,e){return new he(t,re(ue,e))}(t,e))}function ue(t){return t.source}function he(t,e){this.f=t,this.sources=e}function ce(t,e,n,i){this.sink=n,this.disposables=t,this.sinks=e,this.f=i;var r=e.length;this.awaiting=r,this.values=new Array(r),this.hasValue=new Array(r);for(var o=0;o<r;++o)this.hasValue[o]=!1;this.activeCount=e.length}
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function pe(t,e){return function(t){return se(t,oe(arguments))}(f,t,e)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */function fe(t,e){this.transducer=t,this.source=e}function ae(t,e){this.xf=t,this.sink=e}function de(t){this.time=-1/0,this.sink=t}function le(t){this.tx=t}function ye(t){this.tx=t}
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function ve(){this.head=null,this.length=0}
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function we(t,e){return ke(p,t,e)}function ke(t,e,n){return new i(new me(t,e,n.source))}function me(t,e,n){this.f=t,this.concurrency=e,this.source=n}function be(t,e,n,i,r){this.f=t,this.concurrency=e,this.sink=i,this.scheduler=r,this.pending=[],this.current=new ve,this.disposable=x(n.run(this,r)),this.active=!0}function _e(t,e,n){this.prev=this.next=null,this.time=t,this.outer=e,this.sink=n,this.disposable=void 0}function ge(t){return we(1/0,t)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */he.prototype.run=function(t,e){for(var n,i=this.sources.length,r=new Array(i),o=new Array(i),s=new ce(r,o,t,this.f),u=0;u<i;++u)n=o[u]=new ne(u,s),r[u]=this.sources[u].run(n,e);return m(r)},ce.prototype.error=Et.prototype.error,ce.prototype.event=function(t,e){var n=e.index,i=this._updateReady(n);this.values[n]=e.value,0===i&&this.sink.event(t,ie(this.f,this.values))},ce.prototype._updateReady=function(t){return this.awaiting>0&&(this.hasValue[t]||(this.hasValue[t]=!0,this.awaiting-=1)),this.awaiting},ce.prototype.end=function(t,e){v(t,this.disposables[e.index],this.sink),0==--this.activeCount&&this.sink.end(t,e.value)},fe.prototype.run=function(t,e){var n,i=this.transducer(new de(t));return this.source.run(new ae("function"==typeof(n=i)["@@transducer/step"]?new le(n):new ye(n),t),e)},ae.prototype.event=function(t,e){var n=this.xf.step(t,e);return this.xf.isReduced(n)?this.sink.end(t,this.xf.getResult(n)):n},ae.prototype.end=function(t,e){return this.xf.result(e)},ae.prototype.error=function(t,e){return this.sink.error(t,e)},de.prototype["@@transducer/init"]=de.prototype.init=function(){},de.prototype["@@transducer/step"]=de.prototype.step=function(t,e){return isNaN(t)||(this.time=Math.max(t,this.time)),this.sink.event(this.time,e)},de.prototype["@@transducer/result"]=de.prototype.result=function(t){return this.sink.end(this.time,t)},le.prototype.step=function(t,e){return this.tx["@@transducer/step"](t,e)},le.prototype.result=function(t){return this.tx["@@transducer/result"](t)},le.prototype.isReduced=function(t){return null!=t&&t["@@transducer/reduced"]},le.prototype.getResult=function(t){return t["@@transducer/value"]},ye.prototype.step=function(t,e){return this.tx.step(t,e)},ye.prototype.result=function(t){return this.tx.result(t)},ye.prototype.isReduced=function(t){return null!=t&&t.__transducers_reduced__},ye.prototype.getResult=function(t){return t.value},ve.prototype.add=function(t){null!==this.head&&(this.head.prev=t,t.next=this.head),this.head=t,++this.length},ve.prototype.remove=function(t){--this.length,t===this.head&&(this.head=this.head.next),null!==t.next&&(t.next.prev=t.prev,t.next=null),null!==t.prev&&(t.prev.next=t.next,t.prev=null)},ve.prototype.isEmpty=function(){return 0===this.length},ve.prototype.dispose=function(){if(this.isEmpty())return Promise.resolve();var t=[],e=this.head;for(this.head=null,this.length=0;null!==e;)t.push(e.dispose()),e=e.next;return Promise.all(t)},me.prototype.run=function(t,e){return new be(this.f,this.concurrency,this.source,t,e)},be.prototype.event=function(t,e){this._addInner(t,e)},be.prototype._addInner=function(t,e){this.current.length<this.concurrency?this._startInner(t,e):this.pending.push(e)},be.prototype._startInner=function(t,e){try{this._initInner(t,e)}catch(e){this.error(t,e)}},be.prototype._initInner=function(t,e){var n=new _e(t,this,this.sink);n.disposable=function(t,e,n,i){return t(e).source.run(n,i)}(this.f,e,n,this.scheduler),this.current.add(n)},be.prototype.end=function(t,e){this.active=!1,v(t,this.disposable,this.sink),this._checkEnd(t,e)},be.prototype.error=function(t,e){this.active=!1,this.sink.error(t,e)},be.prototype.dispose=function(){return this.active=!1,this.pending.length=0,Promise.all([this.disposable.dispose(),this.current.dispose()])},be.prototype._endInner=function(t,e,n){this.current.remove(n),v(t,n,this),0===this.pending.length?this._checkEnd(t,e):this._startInner(t,this.pending.shift())},be.prototype._checkEnd=function(t,e){!this.active&&this.current.isEmpty()&&this.sink.end(t,e)},_e.prototype.event=function(t,e){this.sink.event(Math.max(t,this.time),e)},_e.prototype.end=function(t,e){this.outer._endInner(Math.max(t,this.time),e,this)},_e.prototype.error=function(t,e){this.outer.error(Math.max(t,this.time),e)},_e.prototype.dispose=function(){return this.disposable.dispose()}
/** @license MIT License (c) copyright 2010-2016 original author or authors */;
/** @license MIT License (c) copyright 2010-2016 original author or authors */
var xe=function(t,e,n){for(var i=e,r=0,o=n.length;r<o;++r)i=t(i,n[r],r);return i};function Ee(t){var e=t.length;return 0===e?I():1===e?t[0]:new i(function(t){return new Pe(xe(Ae,[],t))}(t))}function Ae(t,e){var n=e.source;return n instanceof Pe?t.concat(n.sources):t.concat(n)}function Pe(t){this.sources=t}function Te(t,e,n){this.sink=n,this.disposables=t,this.activeCount=e.length}function qe(t,e,n){return new i(new Se(t,e.source,s(Me,n)))}function Me(t){return t.source}function Se(t,e,n){this.f=t,this.sampler=e,this.sources=n}function Re(t){this.sink=t,this.hasValue=!1}function Ce(t,e,n){this.f=t,this.sinks=e,this.sink=n,this.active=!1}function Ie(t){return t.hasValue}function Le(t){return t.value}
/** @license MIT License (c) copyright 2010-2016 original author or authors */function je(t){this._capacity=t||32,this._length=0,this._head=0}Pe.prototype.run=function(t,e){for(var n,i=this.sources.length,r=new Array(i),o=new Array(i),s=new Te(r,o,t),u=0;u<i;++u)n=o[u]=new ne(u,s),r[u]=this.sources[u].run(n,e);return m(r)},Te.prototype.error=Et.prototype.error,Te.prototype.event=function(t,e){this.sink.event(t,e.value)},Te.prototype.end=function(t,e){v(t,this.disposables[e.index],this.sink),0==--this.activeCount&&this.sink.end(t,e.value)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */,Se.prototype.run=function(t,e){for(var n,i=this.sources.length,r=new Array(i+1),o=new Array(i),s=new Ce(this.f,o,t),u=0;u<i;++u)n=o[u]=new Re(s),r[u]=this.sources[u].run(n,e);return r[u]=this.sampler.run(s,e),m(r)},Re.prototype.event=function(t,e){this.value=e,this.hasValue=!0,this.sink._notify(this)},Re.prototype.end=function(){},Re.prototype.error=Et.prototype.error,Ce.prototype._notify=function(){this.active||(this.active=this.sinks.every(Ie))},Ce.prototype.event=function(t){this.active&&this.sink.event(t,ie(this.f,s(Le,this.sinks)))},Ce.prototype.end=Et.prototype.end,Ce.prototype.error=Et.prototype.error,je.prototype.push=function(t){var e=this._length;this._checkCapacity(e+1),this[this._head+e&this._capacity-1]=t,this._length=e+1},je.prototype.shift=function(){var t=this._head,e=this[t];return this[t]=void 0,this._head=t+1&this._capacity-1,this._length--,e},je.prototype.isEmpty=function(){return 0===this._length},je.prototype.length=function(){return this._length},je.prototype._checkCapacity=function(t){this._capacity<t&&this._ensureCapacity(this._capacity<<1)},je.prototype._ensureCapacity=function(t){var e=this._capacity;this._capacity=t;var n=this._head+this._length;n>e&&function(t,e,n,i,r){for(var o=0;o<r;++o)n[o+i]=t[o+e],t[o+e]=void 0}
/** @license MIT License (c) copyright 2010-2016 original author or authors */(this,0,this,e,n&e-1)};var Ne=s;function Oe(t,e){return 0===e.length?I():1===e.length?Rt(t,e[0]):new i(new We(t,Ne(Be,e)))}function Be(t){return t.source}function We(t,e){this.f=t,this.sources=e}function De(t,e,n,i){this.f=t,this.sinks=n,this.sink=i,this.buffers=e}function Ve(t){return t.shift()}function Ue(t){this.source=t}function ze(t,e){this.sink=t,this.scheduler=e,this.current=null,this.ended=!1}function Fe(t,e,n,i){this.min=t,this.max=e,this.outer=n,this.sink=i,this.disposable=k()}function He(t,e){return new i(new Ge(t,e.source))}function Ge(t,e){this.equals=t,this.source=e}function Je(t,e){this.equals=t,this.sink=e,this.value=void 0,this.init=!0}function Ke(t,e){return t===e}
/** @license MIT License (c) copyright 2010-2016 original author or authors */function Qe(t,e,n){return e<=t?I():new i(Xe(t,e,n.source))}function Xe(t,e,n){return n instanceof Mt?function(t,e,n){return Mt.create(n.f,Xe(t,e,n.source))}(t,e,n):n instanceof Ye?function(t,e,n){return t+=n.min,e=Math.min(e+n.min,n.max),new Ye(t,e,n.source)}(t,e,n):new Ye(t,e,n)}function Ye(t,e,n){this.source=n,this.min=t,this.max=e}function Ze(t,e,n,i){this.sink=n,this.skip=t,this.take=e,this.disposable=i}function $e(t,e){this.p=t,this.source=e}function tn(t,e,n){this.p=t,this.sink=e,this.active=!0,this.disposable=n}function en(t,e){this.p=t,this.source=e}function nn(t,e){this.p=t,this.sink=e,this.skipping=!0}function rn(t,e){this.p=t,this.source=e}function on(t,e){this.p=t,this.sink=e,this.skipping=!1}
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function sn(t,e){return new i(new hn(t.source,e.source))}function un(t,e){return new i(new cn(t.source,e.source))}function hn(t,e){this.maxSignal=t,this.source=e}function cn(t,e){this.minSignal=t,this.source=e}function pn(t,e){this.value=t,this.sink=e}function fn(t,e,n){this.min=t,this.max=e,this.sink=n}function an(t,e,n){this.value=1/0,this.sink=e,this.disposable=t.run(this,n)}function dn(t,e,n){this.value=1/0,this.sink=e,this.disposable=t.run(this,n)}function ln(){}
/** @license MIT License (c) copyright 2010-2016 original author or authors */function yn(t,e){this.dt=t,this.source=e}function vn(t,e,n){this.dt=t,this.sink=e,this.scheduler=n}function wn(t){this.source=t}function kn(t){this.sink=t}function mn(t,e){return e instanceof Mt?function(t,e){return Mt.create(e.f,mn(t,e.source))}(t,e):e instanceof bn?function(t,e){return new bn(Math.max(t,e.period),e.source)}(t,e):new bn(t,e)}function bn(t,e){this.period=t,this.source=e}function _n(t,e){this.time=0,this.period=t,this.sink=e}function gn(t,e){this.dt=t,this.source=e}function xn(t,e,n,i){this.dt=t,this.sink=n,this.scheduler=i,this.value=void 0,this.timer=null,this.disposable=e.run(this,i)}function En(t,e){this.debounce=t,this.value=e}function An(t){return new i(new Pn(t.source))}function Pn(t){this.source=t}function Tn(t,e){this.sink=t,this.scheduler=e,this.queue=Promise.resolve();var n=this;this._eventBound=function(t){n.sink.event(n.scheduler.now(),t)},this._endBound=function(t){n.sink.end(n.scheduler.now(),t)},this._errorBound=function(t){n.sink.error(n.scheduler.now(),t)}}
/** @license MIT License (c) copyright 2010-2016 original author or authors */
function qn(t){this.sink=t,this.active=!0}We.prototype.run=function(t,e){for(var n,i=this.sources.length,r=new Array(i),o=new Array(i),s=new Array(i),u=new De(this.f,s,o,t),h=0;h<i;++h)s[h]=new je,n=o[h]=new ne(h,u),r[h]=this.sources[h].run(n,e);return m(r)},De.prototype.event=function(t,e){var n=this.buffers,i=n[e.index];if(i.push(e.value),1===i.length()){if(!function(t){for(var e=0,n=t.length;e<n;++e)if(t[e].isEmpty())return!1;return!0}
/** @license MIT License (c) copyright 2010-2016 original author or authors */(this.buffers))return;!function(t,e,n,i){i.event(e,ie(t,Ne(Ve,n)))}(this.f,t,n,this.sink),function(t,e){for(var n=0,i=t.length;n<i;++n)if(t[n].isEmpty()&&!e[n].active)return!0;return!1}(this.buffers,this.sinks)&&this.sink.end(t,void 0)}},De.prototype.end=function(t,e){this.buffers[e.index].isEmpty()&&this.sink.end(t,e.value)},De.prototype.error=Et.prototype.error,Ue.prototype.run=function(t,e){var n=new ze(t,e);return m([n,this.source.run(n,e)])},ze.prototype.event=function(t,e){this._disposeCurrent(t),this.current=new Fe(t,1/0,this,this.sink),this.current.disposable=e.source.run(this.current,this.scheduler)},ze.prototype.end=function(t,e){this.ended=!0,this._checkEnd(t,e)},ze.prototype.error=function(t,e){this.ended=!0,this.sink.error(t,e)},ze.prototype.dispose=function(){return this._disposeCurrent(this.scheduler.now())},ze.prototype._disposeCurrent=function(t){if(null!==this.current)return this.current._dispose(t)},ze.prototype._disposeInner=function(t,e){e._dispose(t),e===this.current&&(this.current=null)},ze.prototype._checkEnd=function(t,e){this.ended&&null===this.current&&this.sink.end(t,e)},ze.prototype._endInner=function(t,e,n){this._disposeInner(t,n),this._checkEnd(t,e)},ze.prototype._errorInner=function(t,e,n){this._disposeInner(t,n),this.sink.error(t,e)},Fe.prototype.event=function(t,e){t<this.max&&this.sink.event(Math.max(t,this.min),e)},Fe.prototype.end=function(t,e){this.outer._endInner(Math.max(t,this.min),e,this)},Fe.prototype.error=function(t,e){this.outer._errorInner(Math.max(t,this.min),e,this)},Fe.prototype._dispose=function(t){this.max=t,v(t,this.disposable,this.sink)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */,Ge.prototype.run=function(t,e){return this.source.run(new Je(this.equals,t),e)},Je.prototype.end=Et.prototype.end,Je.prototype.error=Et.prototype.error,Je.prototype.event=function(t,e){this.init?(this.init=!1,this.value=e,this.sink.event(t,e)):this.equals(this.value,e)||(this.value=e,this.sink.event(t,e))},Ye.prototype.run=function(t,e){var n=g(),i=new Ze(this.min,this.max-this.min,t,n);return n.setDisposable(this.source.run(i,e)),n},Ze.prototype.end=Et.prototype.end,Ze.prototype.error=Et.prototype.error,Ze.prototype.event=function(t,e){this.skip>0?this.skip-=1:0!==this.take&&(this.take-=1,this.sink.event(t,e),0===this.take&&(this.disposable.dispose(),this.sink.end(t,e)))},$e.prototype.run=function(t,e){var n=g(),i=new tn(this.p,t,n);return n.setDisposable(this.source.run(i,e)),n},tn.prototype.end=Et.prototype.end,tn.prototype.error=Et.prototype.error,tn.prototype.event=function(t,e){if(this.active){var n=this.p;this.active=n(e),this.active?this.sink.event(t,e):(this.disposable.dispose(),this.sink.end(t,e))}},en.prototype.run=function(t,e){return this.source.run(new nn(this.p,t),e)},nn.prototype.end=Et.prototype.end,nn.prototype.error=Et.prototype.error,nn.prototype.event=function(t,e){if(this.skipping){var n=this.p;if(this.skipping=n(e),this.skipping)return}this.sink.event(t,e)},rn.prototype.run=function(t,e){return this.source.run(new on(this.p,t),e)},on.prototype.event=function(t,e){if(!this.skipping){var n=this.p;this.skipping=n(e),this.sink.event(t,e),this.skipping&&this.sink.end(t,e)}},on.prototype.end=Et.prototype.end,on.prototype.error=Et.prototype.error,hn.prototype.run=function(t,e){var n=new pn(-1/0,t),i=new dn(this.maxSignal,t,e);return m([n,i,this.source.run(new fn(n,i,t),e)])},cn.prototype.run=function(t,e){var n=new an(this.minSignal,t,e),i=new pn(1/0,t);return m([n,i,this.source.run(new fn(n,i,t),e)])},pn.prototype.error=Et.prototype.error,pn.prototype.event=ln,pn.prototype.end=ln,pn.prototype.dispose=ln,fn.prototype.event=function(t,e){t>=this.min.value&&t<this.max.value&&this.sink.event(t,e)},fn.prototype.error=Et.prototype.error,fn.prototype.end=Et.prototype.end,an.prototype.event=function(t){t<this.value&&(this.value=t)},an.prototype.end=ln,an.prototype.error=Et.prototype.error,an.prototype.dispose=function(){return this.disposable.dispose()},dn.prototype.event=function(t,e){t<this.value&&(this.value=t,this.sink.end(t,e))},dn.prototype.end=ln,dn.prototype.error=Et.prototype.error,dn.prototype.dispose=function(){return this.disposable.dispose()},yn.prototype.run=function(t,e){var n=new vn(this.dt,t,e);return m([n,this.source.run(n,e)])},vn.prototype.dispose=function(){var t=this;this.scheduler.cancelAll(function(e){return e.task.sink===t.sink})},vn.prototype.event=function(t,e){this.scheduler.delay(this.dt,P.event(e,this.sink))},vn.prototype.end=function(t,e){this.scheduler.delay(this.dt,P.end(e,this.sink))},vn.prototype.error=Et.prototype.error,wn.prototype.run=function(t,e){return this.source.run(new kn(t),e)},kn.prototype.end=Et.prototype.end,kn.prototype.error=Et.prototype.error,kn.prototype.event=function(t,e){this.sink.event(t,{time:t,value:e})}
/** @license MIT License (c) copyright 2010-2016 original author or authors */,bn.prototype.run=function(t,e){return this.source.run(new _n(this.period,t),e)},_n.prototype.event=function(t,e){t>=this.time&&(this.time=t+this.period,this.sink.event(t,e))},_n.prototype.end=Et.prototype.end,_n.prototype.error=Et.prototype.error,gn.prototype.run=function(t,e){return new xn(this.dt,this.source,t,e)},xn.prototype.event=function(t,e){this._clearTimer(),this.value=e,this.timer=this.scheduler.delay(this.dt,new En(this,e))},xn.prototype._event=function(t,e){this._clearTimer(),this.sink.event(t,e)},xn.prototype.end=function(t,e){this._clearTimer()&&(this.sink.event(t,this.value),this.value=void 0),this.sink.end(t,e)},xn.prototype.error=function(t,e){this._clearTimer(),this.sink.error(t,e)},xn.prototype.dispose=function(){return this._clearTimer(),this.disposable.dispose()},xn.prototype._clearTimer=function(){return null!==this.timer&&(this.timer.dispose(),this.timer=null,!0)},En.prototype.run=function(t){this.debounce._event(t,this.value)},En.prototype.error=function(t,e){this.debounce.error(t,e)},En.prototype.dispose=function(){}
/** @license MIT License (c) copyright 2010-2016 original author or authors */,Pn.prototype.run=function(t,e){return this.source.run(new Tn(t,e),e)},Tn.prototype.event=function(t,e){var n=this;this.queue=this.queue.then(function(){return n._event(e)}).catch(this._errorBound)},Tn.prototype.end=function(t,e){var n=this;this.queue=this.queue.then(function(){return n._end(e)}).catch(this._errorBound)},Tn.prototype.error=function(t,e){var n=this;this.queue=this.queue.then(function(){return n._errorBound(e)}).catch(A)},Tn.prototype._event=function(t){return t.then(this._eventBound)},Tn.prototype._end=function(t){return Promise.resolve(t).then(this._endBound)},qn.prototype.event=function(t,e){this.active&&this.sink.event(t,e)},qn.prototype.end=function(t,e){this.active&&(this.disable(),this.sink.end(t,e))},qn.prototype.error=function(t,e){this.disable(),this.sink.error(t,e)},qn.prototype.disable=function(){return this.active=!1,this.sink}
/** @license MIT License (c) copyright 2010-2016 original author or authors */;var Mn=function(t,e){return new i(new Cn(t,e.source))};function Sn(t){this.value=t}function Rn(t,e,n){n.error(t,e)}function Cn(t,e){this.f=t,this.source=e}function In(t,e,n,i){this.f=t,this.sink=new qn(n),this.scheduler=i,this.disposable=e.run(this,i)}Sn.prototype.run=function(t,e){return e.asap(new P(Rn,this.value,t))},Cn.prototype.run=function(t,e){return new In(this.f,this.source,t,e)},In.prototype.event=function(t,e){F(t,e,this.sink)},In.prototype.end=function(t,e){H(t,e,this.sink)},In.prototype.error=function(t,e){var n=this.sink.disable();v(t,this.disposable,this.sink),this._startNext(t,e,n)},In.prototype._startNext=function(t,e,n){try{this.disposable=this._continue(this.f,e,n)}catch(e){n.error(t,e)}},In.prototype._continue=function(t,e,n){return t(e).source.run(n,this.scheduler)},In.prototype.dispose=function(){return this.disposable.dispose()};var Ln=function(t,e){this.source=t,this.sink=e,this.disposed=!1};function jn(t,e,n){try{n.event(t,e)}catch(e){n.error(t,e)}}function Nn(t,e,n){try{n.end(t,e)}catch(e){n.error(t,e)}}Ln.prototype.dispose=function(){if(!this.disposed)return this.disposed=!0,0===this.source.remove(this.sink)&&this.source._dispose()};var On=function(t){return t.dispose()},Bn={dispose:function(){}},Wn=function(t){this.source=t,this.sinks=[],this._disposable=Bn};Wn.prototype.run=function(t,e){return 1===this.add(t)&&(this._disposable=this.source.run(this,e)),new Ln(this,t)},Wn.prototype._dispose=function(){var t=this._disposable;return this._disposable=Bn,Promise.resolve(t).then(On)},Wn.prototype.add=function(t){return this.sinks=function(t,e){for(var n=e.length,i=new Array(n+1),r=0;r<n;++r)i[r]=e[r];return i[n]=t,i}(t,this.sinks),this.sinks.length},Wn.prototype.remove=function(t){var e=c(t,this.sinks);return e>=0&&(this.sinks=h(e,this.sinks)),this.sinks.length},Wn.prototype.event=function(t,e){var n=this.sinks;if(1===n.length)return n[0].event(t,e);for(var i=0;i<n.length;++i)jn(t,e,n[i])},Wn.prototype.end=function(t,e){for(var n=this.sinks,i=0;i<n.length;++i)Nn(t,e,n[i])},Wn.prototype.error=function(t,e){for(var n=this.sinks,i=0;i<n.length;++i)n[i].error(t,e)};var Dn=function(t){var e=t.source;return e instanceof Wn?t:new t.constructor(new Wn(e))};
/** @license MIT License (c) copyright 2010-2016 original author or authors */i.of=S,i.empty=I,i.from=function(t){if(t instanceof i)return t;var e,n=function(t){var e=null;if(t){var n=t[z.a];if("function"==typeof n&&(!(e=n.call(t))||"function"!=typeof e.subscribe))throw new TypeError("invalid observable "+e)}return e}(t);if(null!=n)return function(t){return new i(new G(t))}(n);if(Array.isArray(t)||null!=(e=t)&&"number"==typeof e.length&&"function"!=typeof e)return function(t){return new i(new W(t))}(t);if("function"==typeof t[B])return new i(new V(t));throw new TypeError("from(x) must be observable, iterable, or array-like: "+t)}
/** @license MIT License (c) copyright 2010-2016 original author or authors */,i.prototype.subscribe=function(t){
/** @license MIT License (c) copyright 2010-2016 original author or authors */
return function(t,e){if(Object(t)!==t)throw new TypeError("subscriber must be an object");var n=g(),i=new ct(A,t,n);return n.setDisposable(e.source.run(i,ht)),new pt(n)}(t,this)},i.prototype[z.a]=function(){return this},i.prototype.thru=function(t){return function(t,e){return t(e)}(t,this)},i.prototype.observe=i.prototype.forEach=function(t){return function(t,e){return jt(Ct(t,e))}(t,this)},i.prototype.drain=function(){return jt(this)},i.prototype.loop=function(t,e){return function(t,e,n){return new i(new Nt(t,e,n.source))}(t,e,this)},i.prototype.scan=function(t,e){return function(t,e,n){return new i(new Bt(t,e,n.source))}(t,e,this)},i.prototype.reduce=function(t,e){return function(t,e,n){return _t(new Dt(t,e,n.source))}(t,e,this)},i.prototype.concat=function(t){return ee(this,t)},i.prototype.startWith=function(t){return function(t,e){return ee(S(t),e)}(t,this)},i.prototype.map=function(t){return Rt(t,this)},i.prototype.ap=function(t){return pe(this,t)},i.prototype.constant=function(t){return function(t,e){return Rt(function(){return t},e)}(t,this)},i.prototype.tap=function(t){return Ct(t,this)},i.prototype.transduce=function(t){return function(t,e){return new i(new fe(t,e.source))}(t,this)},i.prototype.chain=function(t){return function(t,e){return ke(t,1/0,e)}(t,this)},i.prototype.flatMap=i.prototype.chain,i.prototype.join=function(){return ge(this)},i.prototype.continueWith=function(t){return Zt(t,this)},i.prototype.flatMapEnd=i.prototype.continueWith,i.prototype.concatMap=function(t){return function(t,e){return ke(t,1,e)}(t,this)},i.prototype.mergeConcurrently=function(t){return we(t,this)},i.prototype.merge=function(){return Ee(function(t,e){var n=e.length,i=new Array(n+1);i[0]=t;for(var r=0;r<n;++r)i[r+1]=e[r];return i}(this,arguments))},i.prototype.combine=function(t){return se(t,u(this,0,arguments))},i.prototype.sampleWith=function(t){return function(t,e){return new i(new Se(p,t.source,[e.source]))}(t,this)},i.prototype.sample=function(t){return qe(t,this,o(arguments))},i.prototype.zip=function(t){return Oe(t,u(this,0,arguments))},i.prototype.switchLatest=function(){return new i(new Ue(this.source))},i.prototype.switch=i.prototype.switchLatest,i.prototype.filter=function(t){return function(t,e){return new i(At.create(t,e.source))}(t,this)},i.prototype.skipRepeats=function(){return He(Ke,this)},i.prototype.skipRepeatsWith=function(t){return He(t,this)},i.prototype.take=function(t){return function(t,e){return Qe(0,t,e)}(t,this)},i.prototype.skip=function(t){return function(t,e){return Qe(t,1/0,e)}(t,this)},i.prototype.slice=function(t,e){return Qe(t,e,this)},i.prototype.takeWhile=function(t){return function(t,e){return new i(new $e(t,e.source))}(t,this)},i.prototype.skipWhile=function(t){return function(t,e){return new i(new en(t,e.source))}(t,this)},i.prototype.skipAfter=function(t){return function(t,e){return new i(new rn(t,e.source))}(t,this)},i.prototype.until=function(t){return sn(t,this)},i.prototype.takeUntil=i.prototype.until,i.prototype.since=function(t){return un(t,this)},i.prototype.skipUntil=i.prototype.since,i.prototype.during=function(t){return function(t,e){return sn(ge(t),un(t,e))}(t,this)},i.prototype.delay=function(t){return function(t,e){return t<=0?e:new i(new yn(t,e.source))}(t,this)},i.prototype.timestamp=function(){return new i(new wn(this.source))},i.prototype.throttle=function(t){return function(t,e){return new i(mn(t,e.source))}(t,this)},i.prototype.debounce=function(t){return function(t,e){return new i(new gn(t,e.source))}(t,this)},i.prototype.awaitPromises=function(){return An(this)},i.prototype.await=i.prototype.awaitPromises,i.prototype.recoverWith=function(t){return Mn(t,this)},i.prototype.flatMapError=i.prototype.recoverWith,i.prototype.multicast=function(){return Dn(this)};const Vn=document.querySelector("#chat-message"),Un=document.querySelector(".messages"),zn=document.querySelector("#chat-input"),Fn=bt("message",window),Hn=bt("change",document.querySelector("#chat-input")).map(t=>t.target.value),Gn=bt("submit",document.querySelector("#chat-form")).tap(t=>t.preventDefault());function Jn(t){const e=document.importNode(Vn.content,!0);e.querySelector(".sender").textContent="me",e.querySelector(".time").textContent=(new Date).toLocaleTimeString(),e.querySelector(".body").textContent=t,Un.appendChild(e),Un.scrollTop=Un.scrollHeight}Hn.sampleWith(Gn).observe(t=>{window.parent.postMessage(t,"*"),Jn(t),zn.value=""}),Fn.observe(console.log),Fn.map(t=>t.data).observe(Jn)},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,